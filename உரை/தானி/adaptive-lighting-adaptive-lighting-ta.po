#
msgid ""
msgstr ""
"Project-Id-Version: Tamil (Adaptive Lighting)\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2024-11-28 22:44+0200\n"
"PO-Revision-Date: 2024-11-29 03:38+0530\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: Tamil <https://hosted.weblate.org/projects/adaptive-lighting/adaptive-lighting/ta/>\n"
"Language: ta\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=2; plural=n != 1;\n"
"X-Generator: Weblate 5.9-dev\n"

msgctxt "title"
msgid "Adaptive Lighting"
msgstr "родроХро╡роорпИрокрпНрокрпБ ро╡ро┐ро│роХрпНроХрпБроХро│рпН"

msgctxt "config.step.user.title"
msgid "Choose a name for the Adaptive Lighting instance"
msgstr "родроХро╡роорпИрокрпНрокрпБ ро╡ро┐ро│роХрпНроХрпБ роЙродро╛ро░рогродрпНродро┐ро▒рпНроХрпБ роТро░рпБ рокрпЖропро░рпИродрпН родрпЗро░рпНро╡рпБроЪрпЖропрпНроХ"

msgctxt "config.step.user.description"
msgid "Every instance can contain multiple lights!"
msgstr "роТро╡рпНро╡рпКро░рпБ роиро┐роХро┤рпНро╡ро┐ро▓рпБроорпН рокро▓ ро╡ро┐ро│роХрпНроХрпБроХро│рпН роЗро░рпБроХрпНроХро▓ро╛роорпН!"

#, read-only
msgctxt "config.step.user.data.name"
msgid "Name"
msgstr "рокрпЖропро░рпН"

msgctxt "config.abort.already_configured"
msgid "This device is already configured"
msgstr "роЗроирпНрод роЪро╛родройроорпН роПро▒рпНроХройро╡рпЗ роХроЯрпНроЯроорпИроХрпНроХрокрпНрокроЯрпНроЯрпБро│рпНро│родрпБ"

msgctxt "options.step.init.title"
msgid "Adaptive Lighting options"
msgstr "родроХро╡роорпИрокрпНрокрпБ ро╡ро┐ро│роХрпНроХрпБ ро╡ро┐ро░рпБрокрпНрокроЩрпНроХро│рпН"

msgctxt "options.step.init.description"
msgid ""
"Configure an Adaptive Lighting component. Option names align with the YAML "
"settings. If you've defined this entry in YAML, no options will appear here."
" For interactive graphs that demonstrate parameter effects, visit [this web "
"app](https://basnijholt.github.io/adaptive-lighting). For further details, "
"see the [official documentation](https://github.com/basnijholt/adaptive-"
"lighting#readme)."
msgstr ""
"родроХро╡роорпИрокрпНрокрпБ ро╡ро┐ро│роХрпНроХрпБ роХрпВро▒рпБроХро│рпИ роЙро│рпНро│роорпИроХрпНроХро╡рпБроорпН. ро╡ро┐ро░рпБрокрпНрокрокрпН рокрпЖропро░рпНроХро│рпН YAML "
"роЕроорпИрокрпНрокрпБроХро│рпБроЯройрпН роЪрпАро░роорпИроХрпНроХрокрпНрокроЯрпБроХро┐ройрпНро▒рой. роЗроирпНрод роЙро│рпНро│рпАроЯрпНроЯрпИ роирпАроЩрпНроХро│рпН YAML роЗро▓рпН "
"ро╡ро░рпИропро▒рпБродрпНродро┐ро░рпБроирпНродро╛ро▓рпН, роЗроЩрпНроХрпЗ роОроирпНрод ро╡ро┐ро░рпБрокрпНрокроЩрпНроХро│рпБроорпН родрпЛройрпНро▒ро╛родрпБ. роЕро│ро╡рпБро░рпБ ро╡ро┐ро│рпИро╡рпБроХро│рпИ "
"роиро┐ро░рпВрокро┐роХрпНроХрпБроорпН роКроЯро╛роЯрпБроорпН ро╡ро░рпИрокроЯроЩрпНроХро│рпБроХрпНроХрпБ, [роЗроирпНрод ро╡ро▓рпИ рокропройрпНрокро╛роЯрпБ] "
"(https://basnijholt.github.io/adaptive-lighting) роРрокрпН рокро╛ро░рпНро╡рпИропро┐роЯро╡рпБроорпН. роорпЗро▓рпБроорпН "
"ро╡ро┐ро╡ро░роЩрпНроХро│рпБроХрпНроХрпБ, [роЕродро┐роХро╛ро░рокрпНрокрпВро░рпНро╡ роЖро╡рогроЩрпНроХро│рпН] "
"(https://github.com/basnijholt/adaptive-lighting#readme) роРрокрпН рокро╛ро░рпНроХрпНроХро╡рпБроорпН."

msgctxt "options.step.init.data.lights"
msgid "lights: List of light entity_ids to be controlled (may be empty). ЁЯМЯ"
msgstr ""
"ро╡ро┐ро│роХрпНроХрпБроХро│рпН: роХроЯрпНроЯрпБрокрпНрокроЯрпБродрпНродрокрпНрокроЯ ро╡рпЗрогрпНроЯро┐роп роТро│ро┐ роиро┐ро▒рпБро╡ройроорпН_роЯрпБроХро│ро┐ройрпН рокроЯрпНроЯро┐ропро▓рпН (роХро╛ро▓ро┐ропро╛роХ"
" роЗро░рпБроХрпНроХро▓ро╛роорпН). ."

#, read-only
msgctxt "options.step.init.data.interval"
msgid "interval"
msgstr "роЗроЯрпИро╡рпЗро│рпИ"

#, read-only
msgctxt "options.step.init.data.transition"
msgid "transition"
msgstr "рооро╛ро▒рпНро▒роорпН"

#, read-only
msgctxt "options.step.init.data.initial_transition"
msgid "initial_transition"
msgstr "родрпКроЯроХрпНроХ_рооропрооро╛роХрпНроХро▓рпН"

msgctxt "options.step.init.data.min_brightness"
msgid "min_brightness: Minimum brightness percentage. ЁЯТб"
msgstr "min_brightness: роХрпБро▒рпИроирпНродрокроЯрпНроЪ роТро│ро┐ ро╡ро┐ро┤рпБроХрпНроХро╛роЯрпБ. ."

msgctxt "options.step.init.data.max_brightness"
msgid "max_brightness: Maximum brightness percentage. ЁЯТб"
msgstr "роЕродро┐роХрокроЯрпНроЪ рокро┐ро░роХро╛роЪроорпН: роЕродро┐роХрокроЯрпНроЪ роТро│ро┐ ро╡ро┐ро┤рпБроХрпНроХро╛роЯрпБ. ."

msgctxt "options.step.init.data.min_color_temp"
msgid "min_color_temp: Warmest color temperature in Kelvin. ЁЯФе"
msgstr "min_color_temp: роХрпЖро▓рпНро╡ро┐ройро┐ро▓рпН ро╡рпЖрокрпНрокрооро╛рой ро╡рогрпНрог ро╡рпЖрокрпНрокроиро┐ро▓рпИ. ."

msgctxt "options.step.init.data.max_color_temp"
msgid "max_color_temp: Coldest color temperature in Kelvin. тЭДя╕П"
msgstr "MAX_COLOR_TEMP: роХрпЖро▓рпНро╡ро┐ройро┐ро▓рпН роХрпБро│ро┐ро░ро╛рой ро╡рогрпНрог ро╡рпЖрокрпНрокроиро┐ро▓рпИ. ."

msgctxt "options.step.init.data.prefer_rgb_color"
msgid ""
"prefer_rgb_color: Whether to prefer RGB color adjustment over light color "
"temperature when possible. ЁЯМИ"
msgstr ""
"bey_rgb_color: роорпБроЯро┐роирпНродро╡ро░рпИ роТро│ро┐ ро╡рогрпНрог ро╡рпЖрокрпНрокроиро┐ро▓рпИропрпИ ро╡ро┐роЯ RGB ро╡рогрпНрог роЪро░ро┐роЪрпЖропрпНродро▓рпИ "
"ро╡ро┐ро░рпБроорпНрокро▓ро╛рооро╛. ."

#, read-only
msgctxt "options.step.init.data.sleep_brightness"
msgid "sleep_brightness"
msgstr "роЪрпНро▓рпАрокрпН_рокро┐ро░рпИроЯрпНройроЪрпН"

#, read-only
msgctxt "options.step.init.data.sleep_rgb_or_color_temp"
msgid "sleep_rgb_or_color_temp"
msgstr "SLEEP_RGB_OR_COLOR_TEMP"

#, read-only
msgctxt "options.step.init.data.sleep_color_temp"
msgid "sleep_color_temp"
msgstr "SLEEP_COLOR_TEMP"

#, read-only
msgctxt "options.step.init.data.sleep_rgb_color"
msgid "sleep_rgb_color"
msgstr "SLEEP_RGB_COLOR"

#, read-only
msgctxt "options.step.init.data.sleep_transition"
msgid "sleep_transition"
msgstr "SLEEP_TRANSITION"

msgctxt "options.step.init.data.transition_until_sleep"
msgid ""
"transition_until_sleep: When enabled, Adaptive Lighting will treat sleep "
"settings as the minimum, transitioning to these values after sunset. ЁЯМЩ"
msgstr ""
"Transition_until_sleep: роЗропроХрпНроХрокрпНрокроЯрпНроЯро╛ро▓рпН, родроХро╡роорпИрокрпНрокрпБ ро╡ро┐ро│роХрпНроХрпБроХро│рпН родрпВроХрпНроХ "
"роЕроорпИрокрпНрокрпБроХро│рпИ роХрпБро▒рпИроирпНродрокроЯрпНроЪрооро╛роХроХрпН роХро░рпБродрпБроорпН, роЪрпВро░ро┐роп роЕроЪрпНродрооройродрпНродро┐ро▒рпНроХрпБрокрпН рокро┐ро▒роХрпБ роЗроирпНрод "
"роородро┐рокрпНрокрпБроХро│рпБроХрпНроХрпБ рооро╛ро▒рпБроорпН. ."

#, read-only
msgctxt "options.step.init.data.sunrise_time"
msgid "sunrise_time"
msgstr "роЪройрпНро░рпИроЪрпН_ роирпЗро░роорпН"

#, read-only
msgctxt "options.step.init.data.min_sunrise_time"
msgid "min_sunrise_time"
msgstr "min_sunrise_time"

#, read-only
msgctxt "options.step.init.data.max_sunrise_time"
msgid "max_sunrise_time"
msgstr "max_sunrise_time"

#, read-only
msgctxt "options.step.init.data.sunrise_offset"
msgid "sunrise_offset"
msgstr "роЪройрпНро░рпИроЪрпН_роЖроГрокрпНроЪрпЖроЯрпН"

#, read-only
msgctxt "options.step.init.data.sunset_time"
msgid "sunset_time"
msgstr "роЪрпВро░ро┐роп роЕроЪрпНродрооройроорпН_ роирпЗро░роорпН"

#, read-only
msgctxt "options.step.init.data.min_sunset_time"
msgid "min_sunset_time"
msgstr "min_sunset_time"

#, read-only
msgctxt "options.step.init.data.max_sunset_time"
msgid "max_sunset_time"
msgstr "max_sunset_time"

#, read-only
msgctxt "options.step.init.data.sunset_offset"
msgid "sunset_offset"
msgstr "роЪройрпНроЪрпЖроЯрпН_роЖроГрокрпНроЪрпЖроЯрпН"

#, read-only
msgctxt "options.step.init.data.brightness_mode"
msgid "brightness_mode"
msgstr "рокро┐ро░роХро╛роЪроорпН_роорпЛроЯрпН"

#, read-only
msgctxt "options.step.init.data.brightness_mode_time_dark"
msgid "brightness_mode_time_dark"
msgstr "рокро┐ро░роХро╛роЪроорпН_роорпЛроЯрпН_ роирпЗро░роорпН_роЯро╛ро░рпНроХрпН"

#, read-only
msgctxt "options.step.init.data.brightness_mode_time_light"
msgid "brightness_mode_time_light"
msgstr "рокро┐ро░роХро╛роЪроорпН_роорпЛроЯрпН_ роЯрпИроорпН_ ро▓рпИроЯрпН"

msgctxt "options.step.init.data.take_over_control"
msgid ""
"take_over_control: Disable Adaptive Lighting if another source calls "
"`light.turn_on` while lights are on and being adapted. Note that this calls "
"`homeassistant.update_entity` every `interval`! ЁЯФТ"
msgstr ""
"Take_over_control: ро╡ро┐ро│роХрпНроХрпБроХро│рпН роЗропроХрпНроХродрпНродро┐ро▓рпН роЗро░рпБроХрпНроХрпБроорпНрокрпЛродрпБ рооро▒рпНро▒рпКро░рпБ роЪро╛ройрпНро▒рпБ "
"`ро▓рпИроЯрпН.роЯро░рпНройрпН_роУроОройрпН` роОройрпНро▒рпБ роЕро┤рпИродрпНродро╛ро▓рпН родроХро╡роорпИрокрпНрокрпБ ро╡ро┐ро│роХрпНроХрпБроХро│рпИ роорпБроЯроХрпНроХрпБ. роЗродрпБ "
"`роУрооро╛роЪро┐роЪрпНроЯройрпНроЯрпН.рокро┐роЯрпЗроЯрпН_роОройрпНроЯро┐роЯрпНроЯро┐` роТро╡рпНро╡рпКро░рпБ` роЗроЯрпИро╡рпЖро│ро┐ропрпИропрпБроорпН 'роОройрпНро▒рпБ роЕро┤рпИроХрпНроХро┐ро▒родрпБ "
"роОройрпНрокродрпИ роиро┐ройрпИро╡ро┐ро▓рпН роХрпКро│рпНроХ! ."

msgctxt "options.step.init.data.detect_non_ha_changes"
msgid ""
"detect_non_ha_changes: Detects and halts adaptations for non-`light.turn_on`"
" state changes. Needs `take_over_control` enabled. ЁЯХ╡я╕П Caution: тЪая╕П Some "
"lights might falsely indicate an 'on' state, which could result in lights "
"turning on unexpectedly. Disable this feature if you encounter such issues."
msgstr ""
"роХрогрпНроЯро▒ро┐родро▓рпН_роиро╛ройрпН_роЖ_роЪрпЗроЮрпНроЪрпНроЪрпН: `ро╡ро┐ро│роХрпНроХрпБ роЕро▓рпНро▓ро╛род. роЯро░рпНройрпН_роУроОройрпН` рооро╛роиро┐ро▓ "
"рооро╛ро▒рпНро▒роЩрпНроХро│рпБроХрпНроХро╛рой родро┤рпБро╡ро▓рпНроХро│рпИроХрпН роХрогрпНроЯро▒ро┐роирпНродрпБ роиро┐ро▒рпБродрпНродрпБроХро┐ро▒родрпБ. `Take_over_control` "
"роЗропроХрпНроХрокрпНрокроЯрпНроЯродрпБ. ЁЯХ╡┼У тАЛтАЛроОроЪрпНроЪро░ро┐роХрпНроХрпИ: тЪа┼У роЪро┐ро▓ ро╡ро┐ро│роХрпНроХрпБроХро│рпН роТро░рпБ 'роЖройрпН' роиро┐ро▓рпИропрпИ рокрпКропрпНропро╛роХроХрпН"
" роХрпБро▒ро┐роХрпНроХроХрпНроХрпВроЯрпБроорпН, роЗродройро╛ро▓рпН ро╡ро┐ро│роХрпНроХрпБроХро│рпН роОродро┐ро░рпНрокро╛ро░ро╛род ро╡ро┐родрооро╛роХ роЗропроХрпНроХрокрпНрокроЯро▓ро╛роорпН. "
"роЗродрпБрокрпЛройрпНро▒ роЪро┐роХрпНроХро▓рпНроХро│рпИ роирпАроЩрпНроХро│рпН роЪроирпНродро┐родрпНродро╛ро▓рпН роЗроирпНрод роЕроорпНроЪродрпНродрпИ роорпБроЯроХрпНроХрпБ."

#, read-only
msgctxt "options.step.init.data.autoreset_control_seconds"
msgid "autoreset_control_seconds"
msgstr "AutoRESET_CONTROL_SECONDS"

msgctxt "options.step.init.data.only_once"
msgid ""
"only_once: Adapt lights only when they are turned on (`true`) or keep "
"adapting them (`false`). ЁЯФД"
msgstr ""
"роороЯрпНроЯрпБроорпН_роЗройрпН: ро╡ро┐ро│роХрпНроХрпБроХро│рпН роЗропроХрпНроХрокрпНрокроЯрпБроорпНрокрпЛродрпБ роороЯрпНроЯрпБроорпЗ (`роЙрогрпНроорпИ`) "
"рооро╛ро▒рпНро▒ро┐ропроорпИроХрпНроХрпБроорпНрокрпЛродрпБ роЕро▓рпНро▓родрпБ роЕро╡ро▒рпНро▒рпИродрпН родро┤рпБро╡ро┐роХрпНроХрпКро│рпНро│рпБроЩрпНроХро│рпН (` родро╡ро▒рпБ`). ."

msgctxt "options.step.init.data.adapt_only_on_bare_turn_on"
msgid ""
"adapt_only_on_bare_turn_on: When turning lights on initially. If set to "
"`true`, AL adapts only if `light.turn_on` is invoked without specifying "
"color or brightness. тЭМЁЯМИ This e.g., prevents adaptation when activating a "
"scene. If `false`, AL adapts regardless of the presence of color or "
"brightness in the initial `service_data`. Needs `take_over_control` enabled."
" ЁЯХ╡я╕П "
msgstr ""
"Sadve_only_on_bare_turn_on: роЖро░роорпНрокродрпНродро┐ро▓рпН ро╡ро┐ро│роХрпНроХрпБроХро│рпИ роЗропроХрпНроХрпБроорпНрокрпЛродрпБ. `роЙрогрпНроорпИ` роОрой "
"роЕроорпИроХрпНроХрокрпНрокроЯрпНроЯро╛ро▓рпН, ро╡рогрпНрогроорпН роЕро▓рпНро▓родрпБ рокро┐ро░роХро╛роЪродрпНродрпИроХрпН роХрпБро▒ро┐рокрпНрокро┐роЯро╛рооро▓рпН` ро▓рпИроЯрпН.роЯро░рпНройрпН_роУроОройрпН` "
"роЪрпЖропро▓рпНрокроЯрпБродрпНродрокрпНрокроЯрпНроЯро╛ро▓рпН роороЯрпНроЯрпБроорпЗ роЕро▓рпН рооро╛ро▒рпНро▒ро┐ропроорпИроХрпНроХро┐ро▒родрпБ. тЭМЁЯМИ роЗродрпБ роО.роХро╛., роТро░рпБ "
"роХро╛роЯрпНроЪро┐ропрпИ роЪрпЖропро▓рпНрокроЯрпБродрпНродрпБроорпНрокрпЛродрпБ родро┤рпБро╡ро▓рпИродрпН родроЯрпБроХрпНроХро┐ро▒родрпБ. `родро╡ро▒рпБ` роОройрпНро▒ро╛ро▓рпН, роЖро░роорпНрок` "
"роЪрпЗро╡рпИ_роЯро╛` роЗро▓рпН роиро┐ро▒роорпН роЕро▓рпНро▓родрпБ роТро│ро┐ роЗро░рпБрокрпНрокродрпИрокрпН рокрпКро░рпБроЯрпНрокроЯрпБродрпНродро╛рооро▓рпН AL "
"рооро╛ро▒рпНро▒ро┐ропроорпИроХрпНроХро┐ро▒родрпБ. `Take_over_control` роЗропроХрпНроХрокрпНрокроЯрпНроЯродрпБ. ."

msgctxt "options.step.init.data.separate_turn_on_commands"
msgid ""
"separate_turn_on_commands: Use separate `light.turn_on` calls for color and "
"brightness, needed for some light types. ЁЯФА"
msgstr ""
"родройро┐родрпНродройро┐_роЯро░рпНройрпН_роЖройрпН_роХро╛роорогрпНроЯрпНроЪрпН: роЪро┐ро▓ роТро│ро┐ ро╡роХрпИроХро│рпБроХрпНроХрпБ родрпЗро╡рпИрокрпНрокроЯрпБроорпН ро╡рогрпНрогроорпН рооро▒рпНро▒рпБроорпН "
"рокро┐ро░роХро╛роЪродрпНродро┐ро▒рпНроХро╛рой родройро┐родрпНродройро┐ `ро▓рпИроЯрпН.роЯро░рпНройрпН_роУроОройрпН` роЕро┤рпИрокрпНрокрпБроХро│рпИрокрпН рокропройрпНрокроЯрпБродрпНродро╡рпБроорпН. ."

#, read-only
msgctxt "options.step.init.data.send_split_delay"
msgid "send_split_delay"
msgstr "send_split_delay"

#, read-only
msgctxt "options.step.init.data.adapt_delay"
msgid "adapt_delay"
msgstr "роЕроЯро╛рокроорпН_роЯрпЖро▓рпЗ"

#, forbidden
msgctxt "options.step.init.data.skip_redundant_commands"
msgid ""
"skip_redundant_commands: Skip sending adaptation commands whose target state"
" already equals the light's known state. Minimizes network traffic and "
"improves the adaptation responsivity in some situations. ЁЯУЙDisable if "
"physical light states get out of sync with HA's recorded state."
msgstr ""
"Skip_redundant_commands: родро┤рпБро╡ро▓рпН роХроЯрпНроЯро│рпИроХро│рпИ роЕройрпБрокрпНрокрпБро╡родрпИродрпН родро╡ро┐ро░рпНроХрпНроХро╡рпБроорпН, роЕродройрпН "
"роЗро▓роХрпНроХрпБ роиро┐ро▓рпИ роПро▒рпНроХройро╡рпЗ роТро│ро┐ропро┐ройрпН роЕро▒ро┐ропрокрпНрокроЯрпНроЯ роиро┐ро▓рпИроХрпНроХрпБ роЪроороорпН. рокро┐рогрпИропроорпН рокрпЛроХрпНроХрпБро╡ро░родрпНродрпИ "
"роХрпБро▒рпИроХрпНроХро┐ро▒родрпБ рооро▒рпНро▒рпБроорпН роЪро┐ро▓ роЪрпВро┤рпНроиро┐ро▓рпИроХро│ро┐ро▓рпН родро┤рпБро╡ро▓рпН рооро▒рпБроорпКро┤ро┐ропрпИ роорпЗроорпНрокроЯрпБродрпНродрпБроХро┐ро▒родрпБ. роЖ "
"роЗройрпН рокродро┐ро╡рпБ роЪрпЖропрпНропрокрпНрокроЯрпНроЯ роиро┐ро▓рпИропрпБроЯройрпН роЗропро▒рпНрокро┐ропро▓рпН роТро│ро┐ роиро┐ро▓рпИроХро│рпН роТродрпНродро┐роЪрпИро╡ро┐ро▓ро┐ро░рпБроирпНродрпБ "
"ро╡рпЖро│ро┐ропрпЗро▒ро┐ройро╛ро▓рпН роЕродрпБ роХро╛рогроХрпНроХрпВроЯро┐ропродрпБ."

msgctxt "options.step.init.data.intercept"
msgid ""
"intercept: Intercept and adapt `light.turn_on` calls to enabling "
"instantaneous color and brightness adaptation. ЁЯПОя╕П Disable for lights that do"
" not support `light.turn_on` with color and brightness."
msgstr ""
"роЗроЯрпИрооро▒ро┐рокрпНрокрпБ: роЙроЯройроЯро┐ ро╡рогрпНрогроорпН рооро▒рпНро▒рпБроорпН рокро┐ро░роХро╛роЪрооро╛рой родро┤рпБро╡ро▓рпИ роЪрпЖропро▓рпНрокроЯрпБродрпНрод `роТро│ро┐. Color "
"ро╡рогрпНрогроорпН рооро▒рпНро▒рпБроорпН рокро┐ро░роХро╛роЪродрпНродрпБроЯройрпН `роТро│ро┐."

msgctxt "options.step.init.data.multi_light_intercept"
msgid ""
"multi_light_intercept: Intercept and adapt `light.turn_on` calls that target"
" multiple lights. тЮЧтЪая╕П This might result in splitting up a single "
"`light.turn_on` call into multiple calls, e.g., when lights are in different"
" switches. Requires `intercept` to be enabled."
msgstr ""
"Mulli_light_intect: рокро▓ ро╡ро┐ро│роХрпНроХрпБроХро│рпИ роХрпБро▒ро┐ро╡рпИроХрпНроХрпБроорпН `light.turn_on` роЕро┤рпИрокрпНрокрпБроХро│рпИ "
"роЗроЯрпИрооро▒ро┐роХрпНроХро╡рпБроорпН рооро╛ро▒рпНро▒ро╡рпБроорпН. тЮЧтЪа┼У роЗродрпБ роТро░рпБ `ро▓рпИроЯрпН.роЯро░рпНройрпН_роТройрпН` роЕро┤рпИрокрпНрокрпИ рокро▓ роЕро┤рпИрокрпНрокрпБроХро│ро╛роХ"
" рокро┐ро░ро┐роХрпНроХроХрпНроХрпВроЯрпБроорпН, роО.роХро╛., ро╡ро┐ро│роХрпНроХрпБроХро│рпН ро╡рпЖро╡рпНро╡рпЗро▒рпБ роЪрпБро╡ро┐роЯрпНроЪрпБроХро│ро┐ро▓рпН роЗро░рпБроХрпНроХрпБроорпНрокрпЛродрпБ. "
"роЗропроХрпНроХрокрпНрокроЯ ро╡рпЗрогрпНроЯрпБроорпН `роЗроЯрпИрооро▒ро┐рокрпНрокрпБ` родрпЗро╡рпИ."

msgctxt "options.step.init.data.include_config_in_attributes"
msgid ""
"include_config_in_attributes: Show all options as attributes on the switch "
"in Home Assistant when set to `true`. ЁЯУЭ"
msgstr ""
"роЕроЯроЩрпНроХрпБроорпН_роХро╛ройрпНроГрокро┐роХрпН_роЗройрпН_роЕроЯрпНро░ро┐рокро┐ропрпВроЯрпН: `роЙрогрпНроорпИ` роОрой роЕроорпИроХрпНроХрокрпНрокроЯрпНроЯро┐ро░рпБроХрпНроХрпБроорпН рокрпЛродрпБ "
"ро╡рпАроЯрпНроЯрпБ роЙродро╡ро┐ропро╛ро│ро░ро┐ройрпН роЪрпБро╡ро┐роЯрпНроЪро┐ро▓рпН роЙро│рпНро│ рокрогрпНрокрпБроХро│ро╛роХ роЕройрпИродрпНродрпБ ро╡ро┐ро░рпБрокрпНрокроЩрпНроХро│рпИропрпБроорпН "
"роХро╛роЯрпНроЯрпБроЩрпНроХро│рпН. ."

msgctxt "options.step.init.data_description.interval"
msgid "Frequency to adapt the lights, in seconds. ЁЯФД"
msgstr "ро╡ро┐ро│роХрпНроХрпБроХро│рпИ рооро╛ро▒рпНро▒ро┐ропроорпИроХрпНроХ роЕродро┐ро░рпНро╡рпЖрогрпН, роирпКроЯро┐роХро│ро┐ро▓рпН. ."

msgctxt "options.step.init.data_description.transition"
msgid "Duration of transition when lights change, in seconds. ЁЯХС"
msgstr "ро╡ро┐ро│роХрпНроХрпБроХро│рпН рооро╛ро▒рпБроорпНрокрпЛродрпБ, тАЛтАЛроирпКроЯро┐роХро│ро┐ро▓рпН рооро╛ро▒рпНро▒родрпНродро┐ройрпН роХро╛ро▓роорпН. ."

msgctxt "options.step.init.data_description.initial_transition"
msgid ""
"Duration of the first transition when lights turn from `off` to `on` in "
"seconds. тП▓я╕П"
msgstr ""
"ро╡ро┐ро│роХрпНроХрпБроХро│рпН `роЖроГрокрпН` роорпБродро▓рпН` роЖройрпН `ро╡ро░рпИ роирпКроЯро┐роХро│ро┐ро▓рпН рооро╛ро▒рпБроорпН рокрпЛродрпБ роорпБродро▓рпН рооро╛ро▒рпНро▒родрпНродро┐ройрпН "
"роХро╛ро▓роорпН. ."

msgctxt "options.step.init.data_description.sleep_brightness"
msgid "Brightness percentage of lights in sleep mode. ЁЯШ┤"
msgstr "родрпВроХрпНроХ рокропройрпНроорпБро▒рпИропро┐ро▓рпН ро╡ро┐ро│роХрпНроХрпБроХро│ро┐ройрпН роТро│ро┐ ро╡ро┐ро┤рпБроХрпНроХро╛роЯрпБ. ."

msgctxt "options.step.init.data_description.sleep_rgb_or_color_temp"
msgid "Use either `\"rgb_color\"` or `\"color_temp\"` in sleep mode. ЁЯМЩ"
msgstr ""
"родрпВроХрпНроХ рокропройрпНроорпБро▒рпИропро┐ро▓рпН `\" rgb_color \"` роЕро▓рпНро▓родрпБ `\" Color_Temp \"key роРрокрпН "
"рокропройрпНрокроЯрпБродрпНродро╡рпБроорпН. ."

msgctxt "options.step.init.data_description.sleep_color_temp"
msgid ""
"Color temperature in sleep mode (used when `sleep_rgb_or_color_temp` is "
"`color_temp`) in Kelvin. ЁЯШ┤"
msgstr ""
"роЪрпНро▓рпАрокрпН рокропройрпНроорпБро▒рпИропро┐ро▓рпН ро╡рогрпНрог ро╡рпЖрокрпНрокроиро┐ро▓рпИ (роХрпЖро▓рпНро╡ро┐ройро┐ро▓рпН `SLEEP_RGB_OR_COLOR_TEMP` "
"роОройрпНрокродрпБ` color_temp` роЖроХ роЗро░рпБроХрпНроХрпБроорпНрокрпЛродрпБ рокропройрпНрокроЯрпБродрпНродрокрпНрокроЯрпБроХро┐ро▒родрпБ). ."

msgctxt "options.step.init.data_description.sleep_rgb_color"
msgid ""
"RGB color in sleep mode (used when `sleep_rgb_or_color_temp` is "
"\"rgb_color\"). ЁЯМИ"
msgstr ""
"родрпВроХрпНроХ рокропройрпНроорпБро▒рпИропро┐ро▓рпН RGB ро╡рогрпНрогроорпН (`SLEEP_RGB_OR_COLOR_TEMP`\" RGB_COLOR \"роЖроХ "
"роЗро░рпБроХрпНроХрпБроорпНрокрпЛродрпБ рокропройрпНрокроЯрпБродрпНродрокрпНрокроЯрпБроХро┐ро▒родрпБ). ."

msgctxt "options.step.init.data_description.sleep_transition"
msgid "Duration of transition when \"sleep mode\" is toggled in seconds. ЁЯШ┤"
msgstr "\"родрпВроХрпНроХ рокропройрпНроорпБро▒рпИ\" роирпКроЯро┐роХро│ро┐ро▓рпН рооро╛ро▒рпНро▒рокрпНрокроЯрпБроорпНрокрпЛродрпБ рооро╛ро▒рпНро▒родрпНродро┐ройрпН роХро╛ро▓роорпН. ."

msgctxt "options.step.init.data_description.sunrise_time"
msgid "Set a fixed time (HH:MM:SS) for sunrise. ЁЯМЕ"
msgstr "роЪрпВро░ро┐роп роЙродропродрпНродро┐ро▒рпНроХрпБ роТро░рпБ роиро┐ро▓рпИропро╛рой роирпЗро░родрпНродрпИ (HH: MM: SS) роЕроорпИроХрпНроХро╡рпБроорпН. ."

msgctxt "options.step.init.data_description.min_sunrise_time"
msgid ""
"Set the earliest virtual sunrise time (HH:MM:SS), allowing for later "
"sunrises. ЁЯМЕ"
msgstr ""
"роЖро░роорпНрокроХро╛ро▓ роорпЖропрпНроиро┐роХро░рпН роЪрпВро░ро┐роп роЙродроп роирпЗро░родрпНродрпИ (HH: MM: SS) роЕроорпИроХрпНроХро╡рпБроорпН, рокро┐ройрпНройро░рпН роЪрпВро░ро┐роп "
"роЙродропроЩрпНроХро│рпИ роЕройрпБроородро┐роХрпНроХро┐ро▒родрпБ. ."

msgctxt "options.step.init.data_description.max_sunrise_time"
msgid ""
"Set the latest virtual sunrise time (HH:MM:SS), allowing for earlier "
"sunrises. ЁЯМЕ"
msgstr ""
"роЖро░роорпНрокроХро╛ро▓ роЪрпВро░ро┐роп роЙродропродрпНродрпИ роЕройрпБроородро┐роХрпНроХрпБроорпН роЕрогрпНроорпИроХрпН роХро╛ро▓ роорпЖропрпНроиро┐роХро░рпН роЪрпВро░ро┐роп родрпЛройрпНро▒рпБроХрпИ "
"роирпЗро░родрпНродрпИ (HH: MM: SS) роЕроорпИроХрпНроХро╡рпБроорпН. ."

msgctxt "options.step.init.data_description.sunrise_offset"
msgid "Adjust sunrise time with a positive or negative offset in seconds. тП░"
msgstr ""
"ро╡ро┐роиро╛роЯро┐роХро│ро┐ро▓рпН роирпЗро░рпНрооро▒рпИ роЕро▓рпНро▓родрпБ роОродро┐ро░рпНрооро▒рпИ роЖроГрокрпНроЪрпЖроЯрпН роорпВро▓роорпН роЪрпВро░ро┐роп родрпЛройрпНро▒рпБроХрпИ роирпЗро░родрпНродрпИ "
"роЪро░ро┐роЪрпЖропрпНропро╡рпБроорпН. ."

msgctxt "options.step.init.data_description.sunset_time"
msgid "Set a fixed time (HH:MM:SS) for sunset. ЁЯМЗ"
msgstr "роЪрпВро░ро┐роп роЕроЪрпНродрооройродрпНродро┐ро▒рпНроХрпБ роТро░рпБ роиро┐ро▓рпИропро╛рой роирпЗро░родрпНродрпИ (HH: MM: SS) роЕроорпИроХрпНроХро╡рпБроорпН. ."

msgctxt "options.step.init.data_description.min_sunset_time"
msgid ""
"Set the earliest virtual sunset time (HH:MM:SS), allowing for later sunsets."
" ЁЯМЗ"
msgstr ""
"роЖро░роорпНрокроХро╛ро▓ роорпЖропрпНроиро┐роХро░рпН роЪрпВро░ро┐роп рооро▒рпИро╡рпБ роирпЗро░родрпНродрпИ (HH: MM: SS) роЕроорпИроХрпНроХро╡рпБроорпН, рокро┐ройрпНройро░рпН "
"роЪрпВро░ро┐роп роЕроЪрпНродрооройроЩрпНроХро│рпИ роЕройрпБроородро┐роХрпНроХро┐ро▒родрпБ. ."

msgctxt "options.step.init.data_description.max_sunset_time"
msgid ""
"Set the latest virtual sunset time (HH:MM:SS), allowing for earlier sunsets."
" ЁЯМЗ"
msgstr ""
"роорпБроирпНродрпИроп роЪрпВро░ро┐роп роЕроЪрпНродрооройроЩрпНроХро│рпИ роЕройрпБроородро┐роХрпНроХрпБроорпН роЕрогрпНроорпИроХрпН роХро╛ро▓ роорпЖропрпНроиро┐роХро░рпН роЪройрпНроЪрпЖроЯрпН роирпЗро░родрпНродрпИ"
" (HH: MM: SS) роЕроорпИроХрпНроХро╡рпБроорпН. ."

msgctxt "options.step.init.data_description.sunset_offset"
msgid "Adjust sunset time with a positive or negative offset in seconds. тП░"
msgstr ""
"ро╡ро┐роиро╛роЯро┐роХро│ро┐ро▓рпН роирпЗро░рпНрооро▒рпИ роЕро▓рпНро▓родрпБ роОродро┐ро░рпНрооро▒рпИ роЖроГрокрпНроЪрпЖроЯрпН роорпВро▓роорпН роЪрпВро░ро┐роп рооро▒рпИро╡рпБ роирпЗро░родрпНродрпИ "
"роЪро░ро┐роЪрпЖропрпНропро╡рпБроорпН. ."

msgctxt "options.step.init.data_description.brightness_mode"
msgid ""
"Brightness mode to use. Possible values are `default`, `linear`, and `tanh` "
"(uses `brightness_mode_time_dark` and `brightness_mode_time_light`). ЁЯУИ"
msgstr ""
"рокропройрпНрокроЯрпБродрпНрод рокро┐ро░роХро╛роЪрооро╛рой роорпБро▒рпИ. роЪро╛родрпНродро┐ропрооро╛рой роородро┐рокрпНрокрпБроХро│рпН `роЗропро▓рпНрокрпБроиро┐ро▓рпИ`,` ро▓рпАройро┐ропро░рпН`, "
"рооро▒рпНро▒рпБроорпН `роЯро╛ройрпН` (` рокро┐ро░роХро╛роЪроорпН_роорпЛроЯрпН_ роирпЗро░роорпН_роЯро╛ро░рпНроХрпН` рооро▒рпНро▒рпБроорпН "
"`рокро┐ро░роХро╛роЪроорпН_роорпЛроЯрпН_роороЯрпН_ро▓ро┐роЯрпН` роЖроХро┐ропро╡ро▒рпНро▒рпИрокрпН рокропройрпНрокроЯрпБродрпНродрпБроХро┐ройрпНро▒рой). ."

msgctxt "options.step.init.data_description.brightness_mode_time_dark"
msgid ""
"(Ignored if `brightness_mode='default'`) The duration in seconds to ramp "
"up/down the brightness before/after sunrise/sunset. ЁЯУИЁЯУЙ"
msgstr ". ."

msgctxt "options.step.init.data_description.brightness_mode_time_light"
msgid ""
"(Ignored if `brightness_mode='default'`) The duration in seconds to ramp "
"up/down the brightness after/before sunrise/sunset. ЁЯУИЁЯУЙ."
msgstr ". .."

msgctxt "options.step.init.data_description.autoreset_control_seconds"
msgid ""
"Automatically reset the manual control after a number of seconds. Set to 0 "
"to disable. тП▓я╕П"
msgstr ""
"рокро▓ ро╡ро┐роиро╛роЯро┐роХро│рпБроХрпНроХрпБрокрпН рокро┐ро▒роХрпБ родро╛ройро╛роХро╡рпЗ роХрпИропрпЗроЯрпБ роХроЯрпНроЯрпБрокрпНрокро╛роЯрпНроЯрпИ роорпАроЯрпНроЯроорпИроХрпНроХро╡рпБроорпН. роорпБроЯроХрпНроХ"
" 0 роОрой роЕроорпИроХрпНроХро╡рпБроорпН. ."

msgctxt "options.step.init.data_description.send_split_delay"
msgid ""
"Delay (ms) between `separate_turn_on_commands` for lights that don't support"
" simultaneous brightness and color setting. тП▓я╕П"
msgstr ""
"роТро░рпЗ роирпЗро░родрпНродро┐ро▓рпН роТро│ро┐ рооро▒рпНро▒рпБроорпН ро╡рогрпНрог роЕроорпИрокрпНрокрпИ роЖродро░ро┐роХрпНроХро╛род ро╡ро┐ро│роХрпНроХрпБроХро│рпБроХрпНроХрпБ "
"`родройро┐_роЯро░рпНройрпН_роЖройрпН_роХро╛роорогрпНроЯрпНроЪрпН` роЗроЯрпИропрпЗ роирпЗро░роирпНродро╡ро▒рпБроХрпИ (роОроорпН.роОроЪрпН). ."

msgctxt "options.step.init.data_description.adapt_delay"
msgid ""
"Wait time (seconds) between light turn on and Adaptive Lighting applying "
"changes. Might help to avoid flickering. тП▓я╕П"
msgstr ""
"ро▓рпИроЯрпН роЯро░рпНройрпН рооро▒рпНро▒рпБроорпН родроХро╡роорпИрокрпНрокрпБ ро╡ро┐ро│роХрпНроХрпБроХро│рпН роЗроЯрпИропрпЗ роХро╛родрпНродро┐ро░рпБрокрпНрокрпБ роирпЗро░роорпН (ро╡ро┐роиро╛роЯро┐роХро│рпН)"
" рооро╛ро▒рпНро▒роЩрпНроХро│рпИрокрпН рокропройрпНрокроЯрпБродрпНродрпБроХро┐ро▒родрпБ. роТро│ро┐ро░рпБроорпН родро╡ро┐ро░рпНроХрпНроХ роЙродро╡ро▓ро╛роорпН. ."

msgctxt "options.error.option_error"
msgid "Invalid option"
msgstr "родро╡ро▒ро╛рой ро╡ро┐ро░рпБрокрпНрокроорпН"

msgctxt "options.error.entity_missing"
msgid "One or more selected light entities are missing from Home Assistant"
msgstr ""
"роТройрпНро▒рпБ роЕро▓рпНро▓родрпБ роЕродро▒рпНроХрпБ роорпЗро▒рпНрокроЯрпНроЯ родрпЗро░рпНроирпНродрпЖроЯрпБроХрпНроХрокрпНрокроЯрпНроЯ роТро│ро┐ роиро┐ро▒рпБро╡ройроЩрпНроХро│рпН ро╡рпАроЯрпНроЯрпБ "
"роЙродро╡ро┐ропро╛ро│ро░ро┐роЯрооро┐ро░рпБроирпНродрпБ роХро╛рогро╡ро┐ро▓рпНро▓рпИ"

#, read-only
msgctxt "services.apply.name"
msgid "apply"
msgstr "роЗроЯрпБ"

msgctxt "services.apply.description"
msgid "Applies the current Adaptive Lighting settings to lights."
msgstr ""
"родро▒рпНрокрпЛродрпИроп родроХро╡роорпИрокрпНрокрпБ ро▓рпИроЯрпНроЯро┐роЩрпН роЕроорпИрокрпНрокрпБроХро│рпИ ро╡ро┐ро│роХрпНроХрпБроХро│рпБроХрпНроХрпБ рокропройрпНрокроЯрпБродрпНродрпБроХро┐ро▒родрпБ."

msgctxt "services.apply.fields.entity_id.description"
msgid "The `entity_id` of the switch with the settings to apply. ЁЯУЭ"
msgstr "ро╡ро┐рогрпНрогрокрпНрокро┐роХрпНроХ роЕроорпИрокрпНрокрпБроХро│рпБроЯройрпН роЪрпБро╡ро┐роЯрпНроЪро┐ройрпН `ENTITY_ID`. ."

#, read-only
msgctxt "services.apply.fields.entity_id.name"
msgid "entity_id"
msgstr "роиро┐ро▒рпБро╡ройроорпН_роРроЯро┐"

msgctxt "services.apply.fields.lights.description"
msgid "A light (or list of lights) to apply the settings to. ЁЯТб"
msgstr "роЕроорпИрокрпНрокрпБроХро│рпИрокрпН рокропройрпНрокроЯрпБродрпНрод роТро░рпБ роТро│ро┐ (роЕро▓рпНро▓родрпБ ро╡ро┐ро│роХрпНроХрпБроХро│ро┐ройрпН рокроЯрпНроЯро┐ропро▓рпН). ."

#, read-only
msgctxt "services.apply.fields.lights.name"
msgid "lights"
msgstr "ро╡ро┐ро│роХрпНроХрпБроХро│рпН"

msgctxt "services.apply.fields.transition.description"
msgid "Duration of transition when lights change, in seconds. ЁЯХС"
msgstr "ро╡ро┐ро│роХрпНроХрпБроХро│рпН рооро╛ро▒рпБроорпНрокрпЛродрпБ, тАЛтАЛроирпКроЯро┐роХро│ро┐ро▓рпН рооро╛ро▒рпНро▒родрпНродро┐ройрпН роХро╛ро▓роорпН. ."

#, read-only
msgctxt "services.apply.fields.transition.name"
msgid "transition"
msgstr "рооро╛ро▒рпНро▒роорпН"

msgctxt "services.apply.fields.adapt_brightness.description"
msgid "Whether to adapt the brightness of the light. ЁЯМЮ"
msgstr "роТро│ро┐ропро┐ройрпН рокро┐ро░роХро╛роЪродрпНродрпИ рооро╛ро▒рпНро▒ро┐ропроорпИроХрпНроХ ро╡рпЗрогрпНроЯрпБрооро╛. ."

#, read-only, terminology
msgctxt "services.apply.fields.adapt_brightness.name"
msgid "adapt_brightness"
msgstr "роЕроЯро╛рокрпНроЯрпН_рокро┐ро░рпИроЯрпНройроЪрпН"

msgctxt "services.apply.fields.adapt_color.description"
msgid "Whether to adapt the color on supporting lights. ЁЯМИ"
msgstr "родрпБрогрпИ ро╡ро┐ро│роХрпНроХрпБроХро│ро┐ро▓рпН ро╡рогрпНрогродрпНродрпИ рооро╛ро▒рпНро▒ро┐ропроорпИроХрпНроХ ро╡рпЗрогрпНроЯрпБрооро╛. ."

#, read-only
msgctxt "services.apply.fields.adapt_color.name"
msgid "adapt_color"
msgstr "роЕроЯро╛рокроорпН_роХрпЛро▓ро░рпН"

msgctxt "services.apply.fields.prefer_rgb_color.description"
msgid ""
"Whether to prefer RGB color adjustment over light color temperature when "
"possible. ЁЯМИ"
msgstr ""
"роорпБроЯро┐роирпНродро╡ро░рпИ роТро│ро┐ ро╡рогрпНрог ро╡рпЖрокрпНрокроиро┐ро▓рпИропрпИ ро╡ро┐роЯ RGB ро╡рогрпНрог роЪро░ро┐роЪрпЖропрпНродро▓рпИ ро╡ро┐ро░рпБроорпНрокро▓ро╛рооро╛. ."

#, read-only
msgctxt "services.apply.fields.prefer_rgb_color.name"
msgid "prefer_rgb_color"
msgstr "bey_rgb_color"

msgctxt "services.apply.fields.turn_on_lights.description"
msgid "Whether to turn on lights that are currently off. ЁЯФЖ"
msgstr "родро▒рпНрокрпЛродрпБ роорпБроЯроХрпНроХрокрпНрокроЯрпНроЯ ро╡ро┐ро│роХрпНроХрпБроХро│рпИ роЗропроХрпНроХ ро╡рпЗрогрпНроЯрпБрооро╛. ."

#, read-only
msgctxt "services.apply.fields.turn_on_lights.name"
msgid "turn_on_lights"
msgstr "роЯро░рпНройрпН_роУроОройрпН_ ро╡ро┐ро│роХрпНроХрпБроХро│рпН"

#, read-only
msgctxt "services.set_manual_control.name"
msgid "set_manual_control"
msgstr "set_manual_control"

msgctxt "services.set_manual_control.description"
msgid "Mark whether a light is 'manually controlled'."
msgstr "роТро░рпБ роТро│ро┐ 'роХрпИроорпБро▒рпИропро╛роХ роХроЯрпНроЯрпБрокрпНрокроЯрпБродрпНродрокрпНрокроЯрпНроЯродро╛' роОройрпНрокродрпИроХрпН роХрпБро▒ро┐роХрпНроХро╡рпБроорпН."

msgctxt "services.set_manual_control.fields.entity_id.description"
msgid ""
"The `entity_id` of the switch in which to (un)mark the light as being "
"`manually controlled`. ЁЯУЭ"
msgstr ""
"роЪрпБро╡ро┐роЯрпНроЪро┐ройрпН `роиро┐ро▒рпБро╡ройроорпН_роРроЯро┐`, роЗродро┐ро▓рпН (роЕройрпН) роТро│ро┐ропрпИ` роХрпИроорпБро▒рпИропро╛роХ "
"роХроЯрпНроЯрпБрокрпНрокроЯрпБродрпНродрокрпНрокроЯрпБроХро┐ро▒родрпБ 'роОройрпНро▒рпБ роХрпБро▒ро┐роХрпНроХро╡рпБроорпН. ."

#, read-only
msgctxt "services.set_manual_control.fields.entity_id.name"
msgid "entity_id"
msgstr "роиро┐ро▒рпБро╡ройроорпН_роРроЯро┐"

msgctxt "services.set_manual_control.fields.lights.description"
msgid ""
"entity_id(s) of lights, if not specified, all lights in the switch are "
"selected. ЁЯТб"
msgstr ""
"ро╡ро┐ро│роХрпНроХрпБроХро│ро┐ройрпН entity_id (роХро│рпН), роХрпБро▒ро┐рокрпНрокро┐роЯрокрпНрокроЯро╛ро╡ро┐роЯрпНроЯро╛ро▓рпН, роЪрпБро╡ро┐роЯрпНроЪро┐ро▓рпН роЙро│рпНро│ "
"роЕройрпИродрпНродрпБ ро╡ро┐ро│роХрпНроХрпБроХро│рпБроорпН родрпЗро░рпНроирпНродрпЖроЯрпБроХрпНроХрокрпНрокроЯрпБроХро┐ройрпНро▒рой. ."

#, read-only
msgctxt "services.set_manual_control.fields.lights.name"
msgid "lights"
msgstr "ро╡ро┐ро│роХрпНроХрпБроХро│рпН"

msgctxt "services.set_manual_control.fields.manual_control.description"
msgid ""
"Whether to add (\"true\") or remove (\"false\") the light from the "
"\"manual_control\" list. ЁЯФТ"
msgstr ""
"\"роХрпИропрпЗроЯрпБ_ роХройрпНроЯрпНро░рпЛро▓рпН\" рокроЯрпНроЯро┐ропро▓ро┐ро▓ро┐ро░рпБроирпНродрпБ роТро│ро┐ропрпИ роЪрпЗро░рпНроХрпНроХ ро╡рпЗрогрпНроЯрпБрооро╛ роЕро▓рпНро▓родрпБ роЕроХро▒рпНро▒ "
"ро╡рпЗрогрпНроЯрпБрооро╛ роЕро▓рпНро▓родрпБ роЕроХро▒рпНро▒ ро╡рпЗрогрпНроЯрпБрооро╛ роЕро▓рпНро▓родрпБ роЕроХро▒рпНро▒ ро╡рпЗрогрпНроЯрпБрооро╛? ."

#, read-only
msgctxt "services.set_manual_control.fields.manual_control.name"
msgid "manual_control"
msgstr "роХрпИропрпЗроЯрпБ_ роХройрпНроЯрпНро░рпЛро▓рпН"

#, read-only
msgctxt "services.change_switch_settings.name"
msgid "change_switch_settings"
msgstr "Change_switch_settings"

msgctxt "services.change_switch_settings.description"
msgid ""
"Change any settings you'd like in the switch. All options here are the same "
"as in the config flow."
msgstr ""
"роЪрпБро╡ро┐роЯрпНроЪро┐ро▓рпН роирпАроЩрпНроХро│рпН ро╡ро┐ро░рпБроорпНрокрпБроорпН роОроирпНрод роЕроорпИрокрпНрокрпБроХро│рпИропрпБроорпН рооро╛ро▒рпНро▒ро╡рпБроорпН. роЗроЩрпНроХрпБро│рпНро│ "
"роЕройрпИродрпНродрпБ ро╡ро┐ро░рпБрокрпНрокроЩрпНроХро│рпБроорпН роХроЯрпНроЯроорпИрокрпНрокрпБ роУроЯрпНроЯродрпНродро┐ро▓рпН роЙро│рпНро│родрпИрокрпН рокрпЛро▓ро╡рпЗ роЗро░рпБроХрпНроХрпБроорпН."

msgctxt "services.change_switch_settings.fields.entity_id.description"
msgid "Entity ID of the switch. ЁЯУЭ"
msgstr "роЪрпБро╡ро┐роЯрпНроЪро┐ройрпН роиро┐ро▒рпБро╡рой роРроЯро┐. ."

#, read-only
msgctxt "services.change_switch_settings.fields.entity_id.name"
msgid "entity_id"
msgstr "роиро┐ро▒рпБро╡ройроорпН_роРроЯро┐"

msgctxt "services.change_switch_settings.fields.use_defaults.description"
msgid ""
"Sets the default values not specified in this service call. Options: "
"\"current\" (default, retains current values), \"factory\" (resets to "
"documented defaults), or \"configuration\" (reverts to switch config "
"defaults). тЪЩя╕П"
msgstr ""
"роЗроирпНрод рокрогро┐ роЕро┤рпИрокрпНрокро┐ро▓рпН роХрпБро▒ро┐рокрпНрокро┐роЯрокрпНрокроЯро╛род роЗропро▓рпНрокрпБроиро┐ро▓рпИ роородро┐рокрпНрокрпБроХро│рпИ роЕроорпИроХрпНроХро┐ро▒родрпБ. "
"ро╡ро┐ро░рпБрокрпНрокроЩрпНроХро│рпН: \"роироЯрокрпНрокрпБ\" (роЗропро▓рпНрокрпБроиро┐ро▓рпИ, родро▒рпНрокрпЛродрпИроп роородро┐рокрпНрокрпБроХро│рпИродрпН родроХрпНроХ ро╡рпИродрпНродрпБроХрпН "
"роХрпКро│рпНроХро┐ро▒родрпБ), \"родрпКро┤ро┐ро▒рпНроЪро╛ро▓рпИ\" (роЖро╡рогрокрпНрокроЯрпБродрпНродрокрпНрокроЯрпНроЯ роЗропро▓рпНрокрпБроиро┐ро▓рпИроХро│рпБроХрпНроХрпБ "
"роорпАроЯрпНроЯроорпИроХрпНроХро┐ро▒родрпБ) роЕро▓рпНро▓родрпБ \"роЙро│рпНро│роорпИро╡рпБ\" (роХроЯрпНроЯроорпИрокрпНрокрпБ роЗропро▓рпНрокрпБроиро┐ро▓рпИроХро│рпИ рооро╛ро▒рпНро▒рпБро╡родро▒рпНроХрпБ "
"рооро╛ро▒рпНро▒рпБроХро┐ро▒родрпБ). ."

#, read-only, terminology
msgctxt "services.change_switch_settings.fields.use_defaults.name"
msgid "use_defaults"
msgstr "use_defaults"

msgctxt ""
"services.change_switch_settings.fields.include_config_in_attributes.description"
msgid ""
"Show all options as attributes on the switch in Home Assistant when set to "
"`true`. ЁЯУЭ"
msgstr ""
"`роЙрогрпНроорпИ` роОрой роЕроорпИроХрпНроХрокрпНрокроЯрпНроЯро┐ро░рпБроХрпНроХрпБроорпН рокрпЛродрпБ ро╡рпАроЯрпНроЯрпБ роЙродро╡ро┐ропро╛ро│ро░ро┐ройрпН роЪрпБро╡ро┐роЯрпНроЪро┐ро▓рпН роЙро│рпНро│ "
"роЕройрпИродрпНродрпБ ро╡ро┐ро░рпБрокрпНрокроЩрпНроХро│рпИропрпБроорпН рокрогрпНрокрпБроХро│ро╛роХроХрпН роХро╛роЯрпНроЯрпБроЩрпНроХро│рпН. ."

#, read-only
msgctxt ""
"services.change_switch_settings.fields.include_config_in_attributes.name"
msgid "include_config_in_attributes"
msgstr "роЕроЯроЩрпНроХрпБроорпН_роХро╛ройрпНроГрокро┐роХрпН_роЗройрпН_роЕроЯрпНро░ро┐рокро┐ропрпВроЯрпНроЪрпН"

#. Service has changed
msgctxt "services.change_switch_settings.fields.turn_on_lights.description"
msgid "Whether to turn on lights that are currently off. ЁЯФЖ"
msgstr "родро▒рпНрокрпЛродрпБ роорпБроЯроХрпНроХрокрпНрокроЯрпНроЯ ро╡ро┐ро│роХрпНроХрпБроХро│рпИ роЗропроХрпНроХ ро╡рпЗрогрпНроЯрпБрооро╛. ."

#, read-only, terminology
msgctxt "services.change_switch_settings.fields.turn_on_lights.name"
msgid "turn_on_lights"
msgstr "роЯро░рпНройрпН_роУроОройрпН_ ро╡ро┐ро│роХрпНроХрпБроХро│рпН"

msgctxt ""
"services.change_switch_settings.fields.initial_transition.description"
msgid ""
"Duration of the first transition when lights turn from `off` to `on` in "
"seconds. тП▓я╕П"
msgstr ""
"ро╡ро┐ро│роХрпНроХрпБроХро│рпН `роЖроГрокрпН` роорпБродро▓рпН` роЖройрпН `ро╡ро░рпИ роирпКроЯро┐роХро│ро┐ро▓рпН рооро╛ро▒рпБроорпН рокрпЛродрпБ роорпБродро▓рпН рооро╛ро▒рпНро▒родрпНродро┐ройрпН "
"роХро╛ро▓роорпН. ."

#, read-only
msgctxt "services.change_switch_settings.fields.initial_transition.name"
msgid "initial_transition"
msgstr "родрпКроЯроХрпНроХ_рооропрооро╛роХрпНроХро▓рпН"

msgctxt "services.change_switch_settings.fields.sleep_transition.description"
msgid "Duration of transition when \"sleep mode\" is toggled in seconds. ЁЯШ┤"
msgstr "\"родрпВроХрпНроХ рокропройрпНроорпБро▒рпИ\" роирпКроЯро┐роХро│ро┐ро▓рпН рооро╛ро▒рпНро▒рокрпНрокроЯрпБроорпНрокрпЛродрпБ рооро╛ро▒рпНро▒родрпНродро┐ройрпН роХро╛ро▓роорпН. ."

#, read-only
msgctxt "services.change_switch_settings.fields.sleep_transition.name"
msgid "sleep_transition"
msgstr "SLEEP_TRANSITION"

msgctxt "services.change_switch_settings.fields.max_brightness.description"
msgid "Maximum brightness percentage. ЁЯТб"
msgstr "роЕродро┐роХрокроЯрпНроЪ роТро│ро┐ ро╡ро┐ро┤рпБроХрпНроХро╛роЯрпБ. ."

#, read-only
msgctxt "services.change_switch_settings.fields.max_brightness.name"
msgid "max_brightness"
msgstr "MAX_ рокро┐ро░рпИроЯрпНройроЪрпН"

msgctxt "services.change_switch_settings.fields.max_color_temp.description"
msgid "Coldest color temperature in Kelvin. тЭДя╕П"
msgstr "роХрпЖро▓рпНро╡ро┐ройро┐ро▓рпН роХрпБро│ро┐ро░ро╛рой ро╡рогрпНрог ро╡рпЖрокрпНрокроиро┐ро▓рпИ. ."

#, read-only
msgctxt "services.change_switch_settings.fields.max_color_temp.name"
msgid "max_color_temp"
msgstr "max_color_temp"

msgctxt "services.change_switch_settings.fields.min_brightness.description"
msgid "Minimum brightness percentage. ЁЯТб"
msgstr "роХрпБро▒рпИроирпНродрокроЯрпНроЪ роТро│ро┐ ро╡ро┐ро┤рпБроХрпНроХро╛роЯрпБ. ."

#, read-only
msgctxt "services.change_switch_settings.fields.min_brightness.name"
msgid "min_brightness"
msgstr "min_brightness"

msgctxt "services.change_switch_settings.fields.min_color_temp.description"
msgid "Warmest color temperature in Kelvin. ЁЯФе"
msgstr "роХрпЖро▓рпНро╡ро┐ройро┐ро▓рпН ро╡рпЖрокрпНрокрооро╛рой ро╡рогрпНрог ро╡рпЖрокрпНрокроиро┐ро▓рпИ. ."

#, read-only
msgctxt "services.change_switch_settings.fields.min_color_temp.name"
msgid "min_color_temp"
msgstr "min_color_temp"

msgctxt "services.change_switch_settings.fields.only_once.description"
msgid ""
"Adapt lights only when they are turned on (`true`) or keep adapting them "
"(`false`). ЁЯФД"
msgstr ""
"ро╡ро┐ро│роХрпНроХрпБроХро│рпН роЗропроХрпНроХрокрпНрокроЯрпБроорпНрокрпЛродрпБ роороЯрпНроЯрпБроорпЗ (`роЙрогрпНроорпИ`) рооро╛ро▒рпНро▒ро┐ропроорпИроХрпНроХрпБроорпНрокрпЛродрпБ роЕро▓рпНро▓родрпБ "
"роЕро╡ро▒рпНро▒рпИродрпН родро┤рпБро╡ро┐роХрпНроХрпКро│рпНро│рпБроЩрпНроХро│рпН (` рокрпКропрпН`). ."

#, read-only
msgctxt "services.change_switch_settings.fields.only_once.name"
msgid "only_once"
msgstr "роороЯрпНроЯрпБроорпН_роЗройрпН"

msgctxt "services.change_switch_settings.fields.prefer_rgb_color.description"
msgid ""
"Whether to prefer RGB color adjustment over light color temperature when "
"possible. ЁЯМИ"
msgstr ""
"роорпБроЯро┐роирпНродро╡ро░рпИ роТро│ро┐ ро╡рогрпНрог ро╡рпЖрокрпНрокроиро┐ро▓рпИропрпИ ро╡ро┐роЯ RGB ро╡рогрпНрог роЪро░ро┐роЪрпЖропрпНродро▓рпИ ро╡ро┐ро░рпБроорпНрокро▓ро╛рооро╛. ."

#, read-only
msgctxt "services.change_switch_settings.fields.prefer_rgb_color.name"
msgid "prefer_rgb_color"
msgstr "bey_rgb_color"

msgctxt ""
"services.change_switch_settings.fields.separate_turn_on_commands.description"
msgid ""
"Use separate `light.turn_on` calls for color and brightness, needed for some"
" light types. ЁЯФА"
msgstr ""
"роЪро┐ро▓ роТро│ро┐ ро╡роХрпИроХро│рпБроХрпНроХрпБ родрпЗро╡рпИрокрпНрокроЯрпБроорпН ро╡рогрпНрогроорпН рооро▒рпНро▒рпБроорпН рокро┐ро░роХро╛роЪродрпНродро┐ро▒рпНроХро╛рой родройро┐родрпНродройро┐ "
"`ро▓рпИроЯрпН.роЯро░рпНройрпН_роУроОройрпН` роЕро┤рпИрокрпНрокрпБроХро│рпИрокрпН рокропройрпНрокроЯрпБродрпНродро╡рпБроорпН. ."

#, read-only
msgctxt ""
"services.change_switch_settings.fields.separate_turn_on_commands.name"
msgid "separate_turn_on_commands"
msgstr "родройро┐родрпНродройро┐_роЯро░рпНройрпН_роЖройрпН_роХро╛роорогрпНроЯрпНроЪрпН"

msgctxt "services.change_switch_settings.fields.send_split_delay.description"
msgid ""
"Delay (ms) between `separate_turn_on_commands` for lights that don't support"
" simultaneous brightness and color setting. тП▓я╕П"
msgstr ""
"роТро░рпЗ роирпЗро░родрпНродро┐ро▓рпН роТро│ро┐ рооро▒рпНро▒рпБроорпН ро╡рогрпНрог роЕроорпИрокрпНрокрпИ роЖродро░ро┐роХрпНроХро╛род ро╡ро┐ро│роХрпНроХрпБроХро│рпБроХрпНроХрпБ "
"`родройро┐_роЯро░рпНройрпН_роЖройрпН_роХро╛роорогрпНроЯрпНроЪрпН` роЗроЯрпИропрпЗ роирпЗро░роирпНродро╡ро▒рпБроХрпИ (роОроорпН.роОроЪрпН). ."

#, read-only
msgctxt "services.change_switch_settings.fields.send_split_delay.name"
msgid "send_split_delay"
msgstr "send_split_delay"

msgctxt "services.change_switch_settings.fields.sleep_brightness.description"
msgid "Brightness percentage of lights in sleep mode. ЁЯШ┤"
msgstr "родрпВроХрпНроХ рокропройрпНроорпБро▒рпИропро┐ро▓рпН ро╡ро┐ро│роХрпНроХрпБроХро│ро┐ройрпН роТро│ро┐ ро╡ро┐ро┤рпБроХрпНроХро╛роЯрпБ. ."

#, read-only
msgctxt "services.change_switch_settings.fields.sleep_brightness.name"
msgid "sleep_brightness"
msgstr "роЪрпНро▓рпАрокрпН_рокро┐ро░рпИроЯрпНройроЪрпН"

msgctxt ""
"services.change_switch_settings.fields.sleep_rgb_or_color_temp.description"
msgid "Use either `\"rgb_color\"` or `\"color_temp\"` in sleep mode. ЁЯМЩ"
msgstr ""
"родрпВроХрпНроХ рокропройрпНроорпБро▒рпИропро┐ро▓рпН `\" rgb_color \"` роЕро▓рпНро▓родрпБ `\" Color_Temp \"key роРрокрпН "
"рокропройрпНрокроЯрпБродрпНродро╡рпБроорпН. ."

#, read-only
msgctxt "services.change_switch_settings.fields.sleep_rgb_or_color_temp.name"
msgid "sleep_rgb_or_color_temp"
msgstr "SLEEP_RGB_OR_COLOR_TEMP"

msgctxt "services.change_switch_settings.fields.sleep_rgb_color.description"
msgid ""
"RGB color in sleep mode (used when `sleep_rgb_or_color_temp` is "
"\"rgb_color\"). ЁЯМИ"
msgstr ""
"родрпВроХрпНроХ рокропройрпНроорпБро▒рпИропро┐ро▓рпН RGB ро╡рогрпНрогроорпН (`SLEEP_RGB_OR_COLOR_TEMP`\" RGB_COLOR \"роЖроХ "
"роЗро░рпБроХрпНроХрпБроорпНрокрпЛродрпБ рокропройрпНрокроЯрпБродрпНродрокрпНрокроЯрпБроХро┐ро▒родрпБ). ."

#, read-only
msgctxt "services.change_switch_settings.fields.sleep_rgb_color.name"
msgid "sleep_rgb_color"
msgstr "SLEEP_RGB_COLOR"

msgctxt "services.change_switch_settings.fields.sleep_color_temp.description"
msgid ""
"Color temperature in sleep mode (used when `sleep_rgb_or_color_temp` is "
"`color_temp`) in Kelvin. ЁЯШ┤"
msgstr ""
"роЪрпНро▓рпАрокрпН рокропройрпНроорпБро▒рпИропро┐ро▓рпН ро╡рогрпНрог ро╡рпЖрокрпНрокроиро┐ро▓рпИ (роХрпЖро▓рпНро╡ро┐ройро┐ро▓рпН `SLEEP_RGB_OR_COLOR_TEMP` "
"роОройрпНрокродрпБ` color_temp` роЖроХ роЗро░рпБроХрпНроХрпБроорпНрокрпЛродрпБ рокропройрпНрокроЯрпБродрпНродрокрпНрокроЯрпБроХро┐ро▒родрпБ). ."

#, read-only
msgctxt "services.change_switch_settings.fields.sleep_color_temp.name"
msgid "sleep_color_temp"
msgstr "SLEEP_COLOR_TEMP"

msgctxt "services.change_switch_settings.fields.sunrise_offset.description"
msgid "Adjust sunrise time with a positive or negative offset in seconds. тП░"
msgstr ""
"ро╡ро┐роиро╛роЯро┐роХро│ро┐ро▓рпН роирпЗро░рпНрооро▒рпИ роЕро▓рпНро▓родрпБ роОродро┐ро░рпНрооро▒рпИ роЖроГрокрпНроЪрпЖроЯрпН роорпВро▓роорпН роЪрпВро░ро┐роп родрпЛройрпНро▒рпБроХрпИ роирпЗро░родрпНродрпИ "
"роЪро░ро┐роЪрпЖропрпНропро╡рпБроорпН. ."

#, read-only
msgctxt "services.change_switch_settings.fields.sunrise_offset.name"
msgid "sunrise_offset"
msgstr "роЪройрпНро░рпИроЪрпН_роЖроГрокрпНроЪрпЖроЯрпН"

msgctxt "services.change_switch_settings.fields.sunrise_time.description"
msgid "Set a fixed time (HH:MM:SS) for sunrise. ЁЯМЕ"
msgstr "роЪрпВро░ро┐роп роЙродропродрпНродро┐ро▒рпНроХрпБ роТро░рпБ роиро┐ро▓рпИропро╛рой роирпЗро░родрпНродрпИ (HH: MM: SS) роЕроорпИроХрпНроХро╡рпБроорпН. ."

#, read-only
msgctxt "services.change_switch_settings.fields.sunrise_time.name"
msgid "sunrise_time"
msgstr "роЪройрпНро░рпИроЪрпН_ роирпЗро░роорпН"

msgctxt "services.change_switch_settings.fields.sunset_offset.description"
msgid "Adjust sunset time with a positive or negative offset in seconds. тП░"
msgstr ""
"ро╡ро┐ройро╛роЯро┐роХро│ро┐ро▓рпН роирпЗро░рпНрооро▒рпИ роЕро▓рпНро▓родрпБ роОродро┐ро░рпНрооро▒рпИ роЖроГрокрпНроЪрпЖроЯрпН роорпВро▓роорпН роЪрпВро░ро┐роп рооро▒рпИро╡рпБ роирпЗро░родрпНродрпИ "
"роЪро░ро┐роЪрпЖропрпНропро╡рпБроорпН. ."

#, read-only
msgctxt "services.change_switch_settings.fields.sunset_offset.name"
msgid "sunset_offset"
msgstr "роЪройрпНроЪрпЖроЯрпН_роЖроГрокрпНроЪрпЖроЯрпН"

msgctxt "services.change_switch_settings.fields.sunset_time.description"
msgid "Set a fixed time (HH:MM:SS) for sunset. ЁЯМЗ"
msgstr "роЪрпВро░ро┐роп роЕроЪрпНродрооройродрпНродро┐ро▒рпНроХрпБ роТро░рпБ роиро┐ро▓рпИропро╛рой роирпЗро░родрпНродрпИ (HH: MM: SS) роЕроорпИроХрпНроХро╡рпБроорпН. ."

#, read-only
msgctxt "services.change_switch_settings.fields.sunset_time.name"
msgid "sunset_time"
msgstr "роЪрпВро░ро┐роп роЕроЪрпНродрооройроорпН_ роирпЗро░роорпН"

msgctxt "services.change_switch_settings.fields.max_sunrise_time.description"
msgid ""
"Set the latest virtual sunrise time (HH:MM:SS), allowing for earlier "
"sunrises. ЁЯМЕ"
msgstr ""
"роЖро░роорпНрокроХро╛ро▓ роЪрпВро░ро┐роп роЙродропродрпНродрпИ роЕройрпБроородро┐роХрпНроХрпБроорпН роЕрогрпНроорпИроХрпН роХро╛ро▓ роорпЖропрпНроиро┐роХро░рпН роЪрпВро░ро┐роп родрпЛройрпНро▒рпБроХрпИ "
"роирпЗро░родрпНродрпИ (HH: MM: SS) роЕроорпИроХрпНроХро╡рпБроорпН. ."

#, read-only
msgctxt "services.change_switch_settings.fields.max_sunrise_time.name"
msgid "max_sunrise_time"
msgstr "max_sunrise_time"

msgctxt "services.change_switch_settings.fields.min_sunset_time.description"
msgid ""
"Set the earliest virtual sunset time (HH:MM:SS), allowing for later sunsets."
" ЁЯМЗ"
msgstr ""
"роЖро░роорпНрокроХро╛ро▓ роорпЖропрпНроиро┐роХро░рпН роЪрпВро░ро┐роп рооро▒рпИро╡рпБ роирпЗро░родрпНродрпИ (HH: MM: SS) роЕроорпИроХрпНроХро╡рпБроорпН, рокро┐ройрпНройро░рпН "
"роЪрпВро░ро┐роп роЕроЪрпНродрооройроЩрпНроХро│рпИ роЕройрпБроородро┐роХрпНроХро┐ро▒родрпБ. ."

#, read-only
msgctxt "services.change_switch_settings.fields.min_sunset_time.name"
msgid "min_sunset_time"
msgstr "min_sunset_time"

msgctxt "services.change_switch_settings.fields.take_over_control.description"
msgid ""
"Disable Adaptive Lighting if another source calls `light.turn_on` while "
"lights are on and being adapted. Note that this calls "
"`homeassistant.update_entity` every `interval`! ЁЯФТ"
msgstr ""
"ро╡ро┐ро│роХрпНроХрпБроХро│рпН роЗропроХрпНроХродрпНродро┐ро▓рпН роЗро░рпБроХрпНроХрпБроорпНрокрпЛродрпБ рооро▒рпНро▒рпКро░рпБ роЪро╛ройрпНро▒рпБ `ро▓рпИроЯрпН.роЯро░рпНройрпН_роТройрпН` роОройрпНро▒рпБ "
"роЕро┤рпИродрпНродро╛ро▓рпН родроХро╡роорпИрокрпНрокрпБ ро╡ро┐ро│роХрпНроХрпБроХро│рпИ роорпБроЯроХрпНроХрпБ. роЗродрпБ `роУрооро╛роЪро┐роЪрпНроЯройрпНроЯрпН.рокро┐роЯрпЗроЯрпН_роОройрпНроЯро┐роЯрпНроЯро┐` "
"роТро╡рпНро╡рпКро░рпБ` роЗроЯрпИро╡рпЖро│ро┐ропрпИропрпБроорпН 'роОройрпНро▒рпБ роЕро┤рпИроХрпНроХро┐ро▒родрпБ роОройрпНрокродрпИ роиро┐ройрпИро╡ро┐ро▓рпН роХрпКро│рпНроХ! ."

#, read-only
msgctxt "services.change_switch_settings.fields.take_over_control.name"
msgid "take_over_control"
msgstr "Take_over_control"

msgctxt ""
"services.change_switch_settings.fields.detect_non_ha_changes.description"
msgid ""
"Detects and halts adaptations for non-`light.turn_on` state changes. Needs "
"`take_over_control` enabled. ЁЯХ╡я╕П Caution: тЪая╕П Some lights might falsely "
"indicate an 'on' state, which could result in lights turning on "
"unexpectedly. Disable this feature if you encounter such issues."
msgstr ""
"`ро╡ро┐ро│роХрпНроХрпБ роЕро▓рпНро▓ро╛род. роЯро░рпНройрпН_роУроОройрпН` рооро╛роиро┐ро▓ рооро╛ро▒рпНро▒роЩрпНроХро│рпБроХрпНроХро╛рой родро┤рпБро╡ро▓рпНроХро│рпИроХрпН роХрогрпНроЯро▒ро┐роирпНродрпБ "
"роиро┐ро▒рпБродрпНродрпБроХро┐ро▒родрпБ. `Take_over_control` роЗропроХрпНроХрокрпНрокроЯрпНроЯродрпБ. ЁЯХ╡┼У тАЛтАЛроОроЪрпНроЪро░ро┐роХрпНроХрпИ: тЪа┼У роЪро┐ро▓ "
"ро╡ро┐ро│роХрпНроХрпБроХро│рпН роТро░рпБ 'роЖройрпН' роиро┐ро▓рпИропрпИ рокрпКропрпНропро╛роХроХрпН роХрпБро▒ро┐роХрпНроХроХрпНроХрпВроЯрпБроорпН, роЗродройро╛ро▓рпН ро╡ро┐ро│роХрпНроХрпБроХро│рпН "
"роОродро┐ро░рпНрокро╛ро░ро╛род ро╡ро┐родрооро╛роХ роЗропроХрпНроХрокрпНрокроЯро▓ро╛роорпН. роЗродрпБрокрпЛройрпНро▒ роЪро┐роХрпНроХро▓рпНроХро│рпИ роирпАроЩрпНроХро│рпН роЪроирпНродро┐родрпНродро╛ро▓рпН "
"роЗроирпНрод роЕроорпНроЪродрпНродрпИ роорпБроЯроХрпНроХрпБ."

#, read-only
msgctxt "services.change_switch_settings.fields.detect_non_ha_changes.name"
msgid "detect_non_ha_changes"
msgstr "detect_non_ha_changes"

msgctxt "services.change_switch_settings.fields.transition.description"
msgid "Duration of transition when lights change, in seconds. ЁЯХС"
msgstr "ро╡ро┐ро│роХрпНроХрпБроХро│рпН рооро╛ро▒рпБроорпНрокрпЛродрпБ, тАЛтАЛроирпКроЯро┐роХро│ро┐ро▓рпН рооро╛ро▒рпНро▒родрпНродро┐ройрпН роХро╛ро▓роорпН. ."

#, read-only
msgctxt "services.change_switch_settings.fields.transition.name"
msgid "transition"
msgstr "рооро╛ро▒рпНро▒роорпН"

msgctxt "services.change_switch_settings.fields.adapt_delay.description"
msgid ""
"Wait time (seconds) between light turn on and Adaptive Lighting applying "
"changes. Might help to avoid flickering. тП▓я╕П"
msgstr ""
"ро▓рпИроЯрпН роЯро░рпНройрпН рооро▒рпНро▒рпБроорпН родроХро╡роорпИрокрпНрокрпБ ро╡ро┐ро│роХрпНроХрпБроХро│рпН роЗроЯрпИропрпЗ роХро╛родрпНродро┐ро░рпБрокрпНрокрпБ роирпЗро░роорпН (ро╡ро┐роиро╛роЯро┐роХро│рпН)"
" рооро╛ро▒рпНро▒роЩрпНроХро│рпИрокрпН рокропройрпНрокроЯрпБродрпНродрпБроХро┐ро▒родрпБ. роТро│ро┐ро░рпБроорпН родро╡ро┐ро░рпНроХрпНроХ роЙродро╡ро▓ро╛роорпН. ."

#, read-only
msgctxt "services.change_switch_settings.fields.adapt_delay.name"
msgid "adapt_delay"
msgstr "роЕроЯро╛рокроорпН_роЯрпЖро▓рпЗ"

msgctxt ""
"services.change_switch_settings.fields.autoreset_control_seconds.description"
msgid ""
"Automatically reset the manual control after a number of seconds. Set to 0 "
"to disable. тП▓я╕П"
msgstr ""
"рокро▓ ро╡ро┐роиро╛роЯро┐роХро│рпБроХрпНроХрпБрокрпН рокро┐ро▒роХрпБ родро╛ройро╛роХро╡рпЗ роХрпИропрпЗроЯрпБ роХроЯрпНроЯрпБрокрпНрокро╛роЯрпНроЯрпИ роорпАроЯрпНроЯроорпИроХрпНроХро╡рпБроорпН. роорпБроЯроХрпНроХ"
" 0 роОрой роЕроорпИроХрпНроХро╡рпБроорпН. ."

#, read-only
msgctxt ""
"services.change_switch_settings.fields.autoreset_control_seconds.name"
msgid "autoreset_control_seconds"
msgstr "AutoRESET_CONTROL_SECONDS"
