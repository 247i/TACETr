#
msgid ""
msgstr ""
"Project-Id-Version: Tamil (Lecturify)\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-01-10 17:35+0200\n"
"PO-Revision-Date: 2025-01-11 06:27+0530\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: Tamil <https://hosted.weblate.org/projects/lecturify/last_seen_2/ta/>\n"
"Language: ta\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=2; plural=n != 1;\n"
"X-Generator: Weblate 5.10-dev\n"

#. type: Fenced code block
#, no-wrap
msgid ""
"\n"
"/*\n"
" * Copyright (C) 2021 Gry Llida gry@lecturify.net\n"
" * Copyright (C) 2004-2020 ZNC, see the NOTICE file for details.\n"
" *\n"
" * Licensed under the Apache License, Version 2.0 (the \"License\");\n"
" * you may not use this file except in compliance with the License.\n"
" * You may obtain a copy of the License at\n"
" *\n"
" *     http://www.apache.org/licenses/LICENSE-2.0\n"
" *\n"
" * Unless required by applicable law or agreed to in writing, software\n"
" * distributed under the License is distributed on an \"AS IS\" BASIS,\n"
" * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n"
" * See the License for the specific language governing permissions and\n"
" * limitations under the License.\n"
" */\n"
"\n"
"#include <znc/User.h>\n"
"#include <znc/znc.h>\n"
"#include <time.h>\n"
"\n"
"using std::map;\n"
"using std::pair;\n"
"using std::multimap;\n"
"\n"
"class CLastSeen2Mod : public CModule {\n"
"  private:\n"
"    /* Iterates through all blocked users and returns true if the specified user (sUser)\n"
"    is blocked, else returns false.*/\n"
"    bool IsBlocked(const CString& sUser) {\n"
"\tCModules& GModules = CZNC::Get().GetModules();\n"
"\tCModule* blockuserMod = GModules.FindModule(\"blockuser\");\n"
"        if(blockuserMod){\n"
"        \tMCString::iterator it;\n"
"        \tfor (it = blockuserMod->BeginNV(); it != blockuserMod->EndNV(); ++it) {\n"
"            \tif (sUser == it->first) {\n"
"               \t return true;\n"
"            \t}\n"
"        \t}\n"
"\t}\n"
"        return false;\n"
"    }\n"
"    time_t GetTime(const CUser* pUser) {\n"
"        return GetNV(pUser->GetUsername()).ToULong();\n"
"    }\n"
"\n"
"    void SetTime(const CUser* pUser) {\n"
"        SetNV(pUser->GetUsername(), CString(time(nullptr)));\n"
"    }\n"
"\n"
"    const CString FormatLastSeen2(const CUser* pUser,\n"
"                                 const CString& sDefault = \"\") {\n"
"        time_t last = GetTime(pUser);\n"
"        if (last < 1) {\n"
"            return sDefault;\n"
"        } else {\n"
"            char buf[1024];\n"
"            strftime(buf, sizeof(buf) - 1, \"%c\", localtime(&last));\n"
"            return buf;\n"
"        }\n"
"    }\n"
"\n"
"    typedef multimap<time_t, CUser*> MTimeMulti;\n"
"    typedef map<CString, CUser*> MUsers;\n"
"\n"
"    // Shows all users as well as the time they were last seen online\n"
"    void ShowCommand(const CString& sLine) {\n"
"        if (!GetUser()->IsAdmin()) {\n"
"            PutModule(t_s(\"Access denied\"));\n"
"            return;\n"
"        }\n"
"\n"
"        const MUsers& mUsers = CZNC::Get().GetUserMap();\n"
"        MUsers::const_iterator it;\n"
"        CTable Table;\n"
"\n"
"        Table.AddColumn(t_s(\"User\", \"show\"));\n"
"        Table.AddColumn(t_s(\"Last Seen\", \"show\"));\n"
"        Table.SetStyle(CTable::ListStyle);\n"
"\n"
"        for (it = mUsers.begin(); it != mUsers.end(); ++it) {\n"
"            Table.AddRow();\n"
"            Table.SetCell(t_s(\"User\", \"show\"), it->first);\n"
"            Table.SetCell(t_s(\"Last Seen\", \"show\"),\n"
"                          FormatLastSeen2(it->second, t_s(\"never\")));\n"
"        }\n"
"\n"
"        PutModule(Table);\n"
"    }\n"
"\n"
"  public:\n"
"    MODCONSTRUCTOR(CLastSeen2Mod) {\n"
"        AddHelpCommand();\n"
"        AddCommand(\"Show\", \"\",\n"
"                   t_d(\"Shows list of users and when they last logged in\"),\n"
"                   [=](const CString& sLine) { ShowCommand(sLine); });\n"
"    }\n"
"\n"
"    ~CLastSeen2Mod() override {}\n"
"\n"
"    // Event stuff:\n"
"\n"
"    void OnClientLogin() override { SetTime(GetUser()); }\n"
"\n"
"    void OnClientDisconnect() override { SetTime(GetUser()); }\n"
"\n"
"    EModRet OnDeleteUser(CUser& User) override {\n"
"        DelNV(User.GetUsername());\n"
"        return CONTINUE;\n"
"    }\n"
"\n"
"    // Web stuff:\n"
"\n"
"    bool WebRequiresAdmin() override { return true; }\n"
"    CString GetWebMenuTitle() override { return t_s(\"Last Seen 2\"); }\n"
"\n"
"    bool OnWebRequest(CWebSock& WebSock, const CString& sPageName,\n"
"                      CTemplate& Tmpl) override {\n"
"        if (sPageName == \"index\") {\n"
"            CModules& GModules = CZNC::Get().GetModules();\n"
"            Tmpl[\"WebAdminLoaded\"] =\n"
"                CString(GModules.FindModule(\"webadmin\") != nullptr);\n"
"\n"
"            MTimeMulti mmSorted;\n"
"            const MUsers& mUsers = CZNC::Get().GetUserMap();\n"
"\n"
"            for (MUsers::const_iterator uit = mUsers.begin();\n"
"                 uit != mUsers.end(); ++uit) {\n"
"                mmSorted.insert(\n"
"                    pair<time_t, CUser*>(GetTime(uit->second), uit->second));\n"
"            }\n"
"\n"
"            for (MTimeMulti::const_iterator it = mmSorted.begin();\n"
"                 it != mmSorted.end(); ++it) {\n"
"                CUser* pUser = it->second;\n"
"                CTemplate& Row = Tmpl.AddRow(\"UserLoop\");\n"
"\n"
"                Row[\"Username\"] = pUser->GetUsername();\n"
"                Row[\"IsSelf\"] =\n"
"                    CString(pUser == WebSock.GetSession()->GetUser());\n"
"                Row[\"LastSeen\"] = FormatLastSeen2(pUser, t_s(\"never\"));\n"
"                Row[\"Blocked\"] = CString(IsBlocked(Row[\"Username\"]));\n"
"            }\n"
"\n"
"            return true;\n"
"        }\n"
"\n"
"        return false;\n"
"    }\n"
"\n"
"    bool OnEmbeddedWebRequest(CWebSock& WebSock, const CString& sPageName,\n"
"                              CTemplate& Tmpl) override {\n"
"        if (sPageName == \"webadmin/user\" && WebSock.GetSession()->IsAdmin()) {\n"
"            CUser* pUser = CZNC::Get().FindUser(Tmpl[\"Username\"]);\n"
"            if (pUser) {\n"
"                Tmpl[\"LastSeen\"] = FormatLastSeen2(pUser);\n"
"//                Tmpl[\"Blocked\"] = CString(IsBlocked(Tmpl[\"Username\"]));\n"
"//IsBlocked(Tmpl[\"Username\"]) ? t_s(\"Yes\") : t_s(\"No\"); // XXX\n"
"            }\n"
"            return true;\n"
"        }\n"
"\n"
"        return false;\n"
"    }\n"
"};\n"
"\n"
"template <>\n"
"void TModInfo<CLastSeen2Mod>(CModInfo& Info) {\n"
"    Info.SetWikiPage(\"lastseen2\");\n"
"}\n"
"\n"
"GLOBALMODULEDEFS(CLastSeen2Mod,\n"
"                 t_s(\"Collects data about when a user last logged in. 2\"))\n"
"\n"
msgstr ""
"\n"
"/*\n"
" * Copyright (C) 2021 Gry Llida gry@lecturify.net\n"
" * Copyright (C) 2004-2020 ZNC, see the NOTICE கோப்பு க்கு details.\n"
" *\n"
" * Licensed under the Apache License, Version 2.0 (the \"License\");\n"
" * you சி-வைகாசி not use this கோப்பு except in compliance with the License.\n"
" * You சி-வைகாசி obtain a நகலெடு of the உரிமம் at\n"
" *\n"
" *     http://www.apache.org/licenses/LICENSE-2.0\n"
" *\n"
" * Unless required by applicable law or agreed பெறுநர் in writing, software\n"
" * distributed under the உரிமம் is distributed on an \"AS IS\" BASIS,\n"
" * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n"
" * See the உரிமம் க்கு the specific மொழி governing permissions and\n"
" * limitations under the License.\n"
" */\n"
"\n"
"#include <znc/User.h>\n"
"#include <znc/znc.h>\n"
"#include <time.h>\n"
"\n"
"using std::map;\n"
"using std::pair;\n"
"using std::multimap;\n"
"\n"
"class CLastSeen2Mod : public CModule {\n"
"  private:\n"
"    /* Iterates through அனைத்தும் blocked பயனர்கள் and returns true if the specified பயனர் (sUser)\n"
"    is blocked, else returns false.*/\n"
"    bool IsBlocked(const CString& sUser) {\n"
"\tCModules& GModules = CZNC::Get().GetModules();\n"
"\tCModule* blockuserMod = GModules.FindModule(\"blockuser\");\n"
"        if(blockuserMod){\n"
"        \tMCString::iterator it;\n"
"        \tfor (it = blockuserMod->BeginNV(); it != blockuserMod->EndNV(); ++it) {\n"
"            \tif (sUser == it->first) {\n"
"               \t return true;\n"
"            \t}\n"
"        \t}\n"
"\t}\n"
"        return false;\n"
"    }\n"
"    time_t GetTime(const CUser* pUser) {\n"
"        return GetNV(pUser->GetUsername()).ToULong();\n"
"    }\n"
"\n"
"    void SetTime(const CUser* pUser) {\n"
"        SetNV(pUser->GetUsername(), CString(time(nullptr)));\n"
"    }\n"
"\n"
"    const CString FormatLastSeen2(const CUser* pUser,\n"
"                                 const CString& sDefault = \"\") {\n"
"        time_t last = GetTime(pUser);\n"
"        if (last < 1) {\n"
"            return sDefault;\n"
"        } else {\n"
"            char buf[1024];\n"
"            strftime(buf, sizeof(buf) - 1, \"%c\", localtime(&last));\n"
"            return buf;\n"
"        }\n"
"    }\n"
"\n"
"    typedef multimap<time_t, CUser*> MTimeMulti;\n"
"    typedef map<CString, CUser*> MUsers;\n"
"\n"
"    // Shows அனைத்தும் பயனர்கள் அச் well அச் the time they were last seen online\n"
"    void ShowCommand(const CString& sLine) {\n"
"        if (!GetUser()->IsAdmin()) {\n"
"            PutModule(t_s(\"Access denied\"));\n"
"            return;\n"
"        }\n"
"\n"
"        const MUsers& mUsers = CZNC::Get().GetUserMap();\n"
"        MUsers::const_iterator it;\n"
"        CTable Table;\n"
"\n"
"        Table.AddColumn(t_s(\"User\", \"show\"));\n"
"        Table.AddColumn(t_s(\"Last Seen\", \"show\"));\n"
"        Table.SetStyle(CTable::ListStyle);\n"
"\n"
"        க்கு (it = mUsers.begin(); it != mUsers.end(); ++it) {\n"
"            Table.AddRow();\n"
"            Table.SetCell(t_s(\"User\", \"show\"), it->first);\n"
"            Table.SetCell(t_s(\"Last Seen\", \"show\"),\n"
"                          FormatLastSeen2(it->second, t_s(\"never\")));\n"
"        }\n"
"\n"
"        PutModule(Table);\n"
"    }\n"
"\n"
"  public:\n"
"    MODCONSTRUCTOR(CLastSeen2Mod) {\n"
"        AddHelpCommand();\n"
"        AddCommand(\"Show\", \"\",\n"
"                   t_d(\"Shows பட்டியல் of பயனர்கள் and when they last logged in\"),\n"
"                   [=](const CString& sLine) { ShowCommand(sLine); });\n"
"    }\n"
"\n"
"    ~CLastSeen2Mod() override {}\n"
"\n"
"    // Event stuff:\n"
"\n"
"    void OnClientLogin() override { SetTime(GetUser()); }\n"
"\n"
"    void OnClientDisconnect() override { SetTime(GetUser()); }\n"
"\n"
"    EModRet OnDeleteUser(CUser& User) override {\n"
"        DelNV(User.GetUsername());\n"
"        return CONTINUE;\n"
"    }\n"
"\n"
"    // விரலிடைத் தோல் stuff:\n"
"\n"
"    bool WebRequiresAdmin() override { return true; }\n"
"    CString GetWebMenuTitle() override { return t_s(\"Last Seen 2\"); }\n"
"\n"
"    bool OnWebRequest(CWebSock& WebSock, const CString& sPageName,\n"
"                      CTemplate& Tmpl) override {\n"
"        if (sPageName == \"index\") {\n"
"            CModules& GModules = CZNC::Get().GetModules();\n"
"            Tmpl[\"WebAdminLoaded\"] =\n"
"                CString(GModules.FindModule(\"webadmin\") != nullptr);\n"
"\n"
"            MTimeMulti mmSorted;\n"
"            const MUsers& mUsers = CZNC::Get().GetUserMap();\n"
"\n"
"            க்கு (MUsers::const_iterator uit = mUsers.begin();\n"
"                 uit != mUsers.end(); ++uit) {\n"
"                mmSorted.insert(\n"
"                    pair<time_t, CUser*>(GetTime(uit->second), uit->second));\n"
"            }\n"
"\n"
"            க்கு (MTimeMulti::const_iterator it = mmSorted.begin();\n"
"                 it != mmSorted.end(); ++it) {\n"
"                CUser* pUser = it->second;\n"
"                CTemplate& நிரை = Tmpl.AddRow(\"UserLoop\");\n"
"\n"
"                Row[\"Username\"] = pUser->GetUsername();\n"
"                Row[\"IsSelf\"] =\n"
"                    CString(pUser == WebSock.GetSession()->GetUser());\n"
"                Row[\"LastSeen\"] = FormatLastSeen2(pUser, t_s(\"never\"));\n"
"                Row[\"Blocked\"] = CString(IsBlocked(Row[\"Username\"]));\n"
"            }\n"
"\n"
"            return true;\n"
"        }\n"
"\n"
"        return false;\n"
"    }\n"
"\n"
"    bool OnEmbeddedWebRequest(CWebSock& WebSock, const CString& sPageName,\n"
"                              CTemplate& Tmpl) override {\n"
"        if (sPageName == \"webadmin/user\" && WebSock.GetSession()->IsAdmin()) {\n"
"            CUser* pUser = CZNC::Get().FindUser(Tmpl[\"Username\"]);\n"
"            if (pUser) {\n"
"                Tmpl[\"LastSeen\"] = FormatLastSeen2(pUser);\n"
"//                Tmpl[\"Blocked\"] = CString(IsBlocked(Tmpl[\"Username\"]));\n"
"//IsBlocked(Tmpl[\"Username\"]) ? t_s(\"Yes\") : t_s(\"No\"); // XXX\n"
"            }\n"
"            return true;\n"
"        }\n"
"\n"
"        return false;\n"
"    }\n"
"};\n"
"\n"
"template <>\n"
"void TModInfo<CLastSeen2Mod>(CModInfo& Info) {\n"
"    Info.SetWikiPage(\"lastseen2\");\n"
"}\n"
"\n"
"GLOBALMODULEDEFS(CLastSeen2Mod,\n"
"                 t_s(\"Collects தகவல்கள் பற்றி when a பயனர் last logged in. 2\"))\n"
"\n"
